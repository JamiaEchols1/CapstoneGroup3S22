//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TravelPlannerLibrary.Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class Transportation
    {
        public int Id { get; set; }

        // The departing waypoint id
        private int departingWaypointId;
        public int DepartingWaypointId
        {
            get { return departingWaypointId; }
            set
            {
                if (value == arrivingWaypointId)
                {
                    throw new ArgumentException("Departing waypoint must not equal departing waypoint");
                }
                departingWaypointId = value;
            }
        }

        // The arriving waypoint
        private int arrivingWaypointId;
        public int ArrivingWaypointId
        {
            get { return arrivingWaypointId; }
            set
            {
                if (value == departingWaypointId)
                {
                    throw new ArgumentException("Arriving waypoint must not equal departing waypoint");
                }
                arrivingWaypointId = value;
            }
        }

        // The trip Id
        public int TripId { get; set; }

        // The start time
        public System.DateTime StartTime
        {
            get; set;
        }

        // The end time
        private DateTime endTime;
        public System.DateTime EndTime
        {
            get { return endTime; }
            set
            {
                if (value < StartTime)
                {
                    throw new ArgumentException("End time must be after the start time.");
                }
                endTime = value;
            }
        }

        //  The description
        private string description;
        public string Description
        {
            get { return description; }
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    throw new ArgumentNullException("Transportation must have a description");
                }
                description = value;
            }
        }
        public virtual Waypoint Waypoint { get; set; }
        public virtual Waypoint Waypoint1 { get; set; }
        public virtual Trip Trip { get; set; }
    }
}
